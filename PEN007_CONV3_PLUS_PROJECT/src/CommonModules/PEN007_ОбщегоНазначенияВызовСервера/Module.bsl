// @strict-types
#Область ПрограммныйИнтерфейс

// Тип правила конвертации по свойству конвертируемого объекта.
// 
// Параметры:
//  Свойство - СправочникСсылка.Свойства - Свойство объекта
// 
// Возвращаемое значение:
//  Строка - Тип правила конвертации по свойству, например
//    ПравилаКонвертацииОбъектов, ПравилаКонвертацииПредопределенныхДанных
Функция ТипПравилаКонвертацииПоСвойству(Свойство) Экспорт

	ТипПравилаКонвертации = "";

	ТипыСтрокой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Свойство, "ТипыСтрокой");
	Если СтрНайти(НРег(ТипыСтрокой), НРег("ПеречислениеСсылка")) > 0 Тогда
		ТипПравилаКонвертации = "ПравилаКонвертацииПредопределенныхДанных";
	Иначе
		ТипПравилаКонвертации = "ПравилаКонвертацииОбъектов";
	КонецЕсли;

	Возврат ТипПравилаКонвертации;
КонецФункции

// Ссылка на конвертацию, которая определена по правилу конвертации.
// 
// Параметры:
//  ПравилоКонвертации 	- СправочникСсылка.ПравилаКонвертацииОбъектов -
//    					- СправочникСсылка.ПравилаКонвертацииСвойств - 
//    					- СправочникСсылка.ПравилаОбработкиДанных - 
//    					- СправочникСсылка.ПравилаКонвертацииПредопределенныхДанных - 
// 
// Возвращаемое значение:
//  СправочникСсылка.Конвертации - ссылка на конвертацию, которая определена по правилу
Функция КонвертацияПоПравилу(ПравилоКонвертации) Экспорт

	Конвертация = Справочники.Конвертации.ПустаяСсылка();

	Если ТипЗнч(ПравилоКонвертации) = Тип("СправочникСсылка.ПравилаКонвертацииСвойств") Тогда
		ПКСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоКонвертации, "Владелец");
	Иначе
		ПКСсылка = ПравилоКонвертации;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				   |	Составы.Владелец КАК Конвертация
				   |ИЗ
				   |	Справочник.СоставыКонвертаций КАК Составы
				   |ГДЕ
				   |	Составы.ЭлементКонвертации = &ПКСсылка";

	Запрос.УстановитьПараметр("ПКСсылка", ПКСсылка);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		Конвертация = ВыборкаЗапроса.Конвертация;
	КонецЕсли;

	Возврат Конвертация;
КонецФункции

// Тип конвертации по правилу конвертации.
// 
// Параметры:
//  ПравилоКонвертации 	- СправочникСсылка.ПравилаКонвертацииОбъектов -
//    					- СправочникСсылка.ПравилаКонвертацииСвойств - 
//    					- СправочникСсылка.ПравилаОбработкиДанных - 
//    					- СправочникСсылка.ПравилаКонвертацииПредопределенныхДанных - 
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыКонвертаций - Тип конвертации по правилу
Функция ТипКонвертацииПоПравилу(ПравилоКонвертации) Экспорт
	
	ТипКонвертации = Перечисления.ТипыКонвертаций.ПустаяСсылка();
	
	Если ТипЗнч(ПравилоКонвертации) = Тип("СправочникСсылка.ПравилаКонвертацииСвойств") Тогда
		ПКСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоКонвертации, "Владелец");
	Иначе
		ПКСсылка = ПравилоКонвертации;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				   |	Составы.Владелец КАК Конвертация
				   |ПОМЕСТИТЬ ВТКонвертация
				   |ИЗ
				   |	Справочник.СоставыКонвертаций КАК Составы
				   |ГДЕ
				   |	Составы.ЭлементКонвертации = &ПКСсылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СправочникКонвертация.ТипКонвертации КАК ТипКонвертации
				   |ИЗ
				   |	ВТКонвертация КАК ВТКонвертация
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Конвертации КАК СправочникКонвертация
				   |		ПО ВТКонвертация.Конвертация = СправочникКонвертация.Ссылка";

	Запрос.УстановитьПараметр("ПКСсылка", ПКСсылка);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		ТипКонвертации = ВыборкаЗапроса.ТипКонвертации;
	КонецЕсли;
	
	Возврат ТипКонвертации;
КонецФункции

// Ссылка на правило конвертации ПКО или ПКПД конкретной конвертации по идентификатору правила.
// 
// Параметры:
//  ПКИдентификатор - Строка - Идентификатор правила ПКО или ПКПД (реквизит Код)
//  Конвертация - СправочникСсылка.Конвертации - Конвертация
//  ТипПравила - Строка - Тип правила конвертации, например
//    ПравилаКонвертацииОбъектов,
//    ПравилаКонвертацииПредопределенныхДанных
// 
// Возвращаемое значение:
//  - СправочникСсылка.ПравилаКонвертацииОбъектов, 
//  - СправочникСсылка.ПравилаКонвертацииПредопределенныхДанных 
//  - Неопределено - Ссылка на правило конкретной конвертации по идентификатору правила или неопределено, если не найдено
Функция ПравилоКонвертацииПоИдентификатору(ПКИдентификатор, Конвертация, ТипПравила) Экспорт

	Правило = Неопределено;

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				   |	Составы.ЭлементКонвертации КАК Правило
				   |ИЗ
				   |	Справочник.СоставыКонвертаций КАК Составы
				   |ГДЕ
				   |	Составы.Владелец = &Конвертация
				   |	И ВЫБОР
				   |		КОГДА &ТипПравила = ""ПравилаКонвертацииОбъектов""
				   |			ТОГДА Составы.ЭлементКонвертации ССЫЛКА Справочник.ПравилаКонвертацииОбъектов
				   |		ИНАЧЕ Составы.ЭлементКонвертации ССЫЛКА Справочник.ПравилаКонвертацииПредопределенныхДанных
				   |	КОНЕЦ
				   |	И Составы.ЭлементКонвертации.Код = &ПКИдентификатор";

	Запрос.УстановитьПараметр("Конвертация", Конвертация);
	Запрос.УстановитьПараметр("ТипПравила", ТипПравила);
	Запрос.УстановитьПараметр("ПКИдентификатор", ПКИдентификатор);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		Правило = ВыборкаЗапроса.Правило;
	КонецЕсли;

	Возврат Правило;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти